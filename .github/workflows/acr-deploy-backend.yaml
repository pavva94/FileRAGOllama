name: Build and Push to ACR

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  # Azure Container Registry settings
  REGISTRY: ragregistry1751730493.azurecr.io
  IMAGE_NAME: backend

  # Build settings
  DOCKERFILE_PATH: ./Dockerfile.backend
  CONTEXT_PATH: .

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # Branch name
          type=ref,event=branch
          # Tag name
          type=ref,event=tag
          # Pull request number
          type=ref,event=pr
          # Latest for main branch
          type=raw,value=latest,enable={{is_default_branch}}
          # Short SHA
          type=sha,prefix={{branch}}-
          # Date
          type=raw,value={{date 'YYYY-MM-DD'}}
        labels: |
          org.opencontainers.image.title=${{ env.IMAGE_NAME }}
          org.opencontainers.image.description=Built from ${{ github.repository }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.CONTEXT_PATH }}
        file: ${{ env.DOCKERFILE_PATH }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Print image info
      run: |
        echo "## 🐳 Docker Image Built Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "### Image Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Digest**: ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Pull Command:" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  # Optional: Deploy to Azure Container Instances (ACI) or App Service
  deploy-to-aci:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Container Instances
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
        dns-name-label: ${{ env.IMAGE_NAME }}-${{ github.run_number }}
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        registry-login-server: ${{ env.REGISTRY }}
        registry-username: ${{ secrets.ACR_USERNAME }}
        registry-password: ${{ secrets.ACR_PASSWORD }}
        name: ${{ env.IMAGE_NAME }}
        location: 'east us'
        cpu: 1
        memory: 1.5
        ports: 80
        environment-variables: |
          ENVIRONMENT=production
          VERSION=${{ github.sha }}

    - name: Print deployment info
      run: |
        echo "## 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "- **Container Instance**: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: http://${{ env.IMAGE_NAME }}-${{ github.run_number }}.eastus.azurecontainer.io" >> $GITHUB_STEP_SUMMARY